{
  "hash": "a9530a04c17bfa080fb921067b4599ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"One-factor Design\"\nauthor:\n  - name: \"Longhai Li\"\n    affiliation: \"University of Saskatchewan\"\n    url: \"https://longhaisk.github.io/\"\ndate: today\neditor: source\nformat: \n  html\nexecute:\n  echo: true\n  warning: false\n  message: false\n  cache: false\n  fig-width: 9\n  fig-height: 6\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n## Completely Randomized Design\n### Plasma Etching Experiment\n\nThis section analyzes data from a **Completely Randomized Design (CRD)**. In a CRD, experimental units (in this case, the silicon wafers being etched) are assigned to treatments (the RF Power levels) completely at random. The primary goal is to determine if changing the RF Power level has a statistically significant effect on the mean etch rate.\n\n#### Data and Visualization\n\nWe begin by loading the data into a single, tidy `data.frame`. The response variable, `rate`, contains all the etch rate observations. The predictor variable, `power`, is a **factor**, which is R's way of representing a categorical variable. This tells R to treat the different power levels as distinct groups.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Define the data vectors\nrate <- c(575, 542, 530, 539, 570, 565, 593, 590, 579, 610,\n          600, 651, 610, 637, 629, 725, 700, 715, 685, 710)\npower_levels <- c(160, 180, 200, 220)\n\n## Create the data frame\netching_df <- data.frame(\n  rate = rate,\n  power = factor(rep(power_levels, each = 5))\n)\n\n## Display the first few rows\netching_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   rate power\n1   575   160\n2   542   160\n3   530   160\n4   539   160\n5   570   160\n6   565   180\n7   593   180\n8   590   180\n9   579   180\n10  610   180\n11  600   200\n12  651   200\n13  610   200\n14  637   200\n15  629   200\n16  725   220\n17  700   220\n18  715   220\n19  685   220\n20  710   220\n```\n\n\n:::\n:::\n\n\n\n\n**Grouped Boxplots**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(rate~power, data=etching_df)\n```\n\n::: {.cell-output-display}\n![](crbd_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n**Using ggplot to visualize grouped data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr) # Using dplyr for easier data manipulation\n\n## Calculate group means and their start/end indices\nmean_rates <- etching_df %>%\n  mutate(obs_index = row_number()) %>%\n  group_by(power) %>%\n  summarise(\n    mean_rate = mean(rate),\n    x_start = min(obs_index) - 0.5,\n    x_end = max(obs_index) + 0.5\n  )\n\nggplot(etching_df, aes(x = 1:nrow(etching_df), y = rate, color = power)) +\n  geom_point(size = 3, alpha = 0.7) + # Plot individual data points\n  geom_segment(\n    data = mean_rates, \n    aes(x = x_start, xend = x_end, y = mean_rate, yend = mean_rate),\n    linetype = \"dashed\", \n    size = 1.2\n  ) + # Add line segments for group means\n  labs(\n    title = \"Etch Rate Observations by RF Power Level\",\n    x = \"Observation Index\",\n    y = \"Etch Rate\",\n    color = \"RF Power (W)\"\n  ) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![Index Plot of Etch Rate with Group-Specific Mean Lines](crbd_files/figure-pdf/index-plot-rate-power-segments-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n#### Model Fitting with Sum-to-Zero Constraint\n\nWe fit a linear model using the `lm()` function to perform an **Analysis of Variance (ANOVA)**. The model is specified as `rate ~ power`, and we now include the `data = etching_df` argument.\n\nTo get interpretable estimates for the treatment effects ($\\tau_i$), we use a **sum-to-zero constraint** (`contr.sum`), which forces the sum of the treatment effects to be zero ($\\sum \\tau_i = 0$).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- lm(rate ~ power, data = etching_df, contrasts = list(power = contr.sum))\ncat (\"Model Matrix:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nModel Matrix:\n```\n\n\n:::\n\n```{.r .cell-code}\nmodel.matrix(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   (Intercept) power1 power2 power3\n1            1      1      0      0\n2            1      1      0      0\n3            1      1      0      0\n4            1      1      0      0\n5            1      1      0      0\n6            1      0      1      0\n7            1      0      1      0\n8            1      0      1      0\n9            1      0      1      0\n10           1      0      1      0\n11           1      0      0      1\n12           1      0      0      1\n13           1      0      0      1\n14           1      0      0      1\n15           1      0      0      1\n16           1     -1     -1     -1\n17           1     -1     -1     -1\n18           1     -1     -1     -1\n19           1     -1     -1     -1\n20           1     -1     -1     -1\nattr(,\"assign\")\n[1] 0 1 1 1\nattr(,\"contrasts\")\nattr(,\"contrasts\")$power\n    [,1] [,2] [,3]\n160    1    0    0\n180    0    1    0\n200    0    0    1\n220   -1   -1   -1\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary.fit <- summary(fit)\ncat (\"Summary of lm fitting results:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSummary of lm fitting results:\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary.fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = rate ~ power, data = etching_df, contrasts = list(power = contr.sum))\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -25.4  -13.0    2.8   13.2   25.6 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  617.750      4.085 151.234  < 2e-16 ***\npower1       -66.550      7.075  -9.406 6.39e-08 ***\npower2       -30.350      7.075  -4.290 0.000563 ***\npower3         7.650      7.075   1.081 0.295602    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 18.27 on 16 degrees of freedom\nMultiple R-squared:  0.9261,\tAdjusted R-squared:  0.9122 \nF-statistic:  66.8 on 3 and 16 DF,  p-value: 2.883e-09\n```\n\n\n:::\n:::\n\n\n\n\n#### Point Estimation of Parameters\n\nThe output of the model provides estimates for the overall mean ($\\hat{\\mu}$) and the treatment effects for the first k-1 levels ($\\hat{\\tau}_1, \\hat{\\tau}_2, \\hat{\\tau}_3$).\n\n* $\\hat{\\mu}$ (the Intercept) is the estimate of the grand mean etch rate across all power levels.\n* $\\hat{\\tau}_i$ is the estimated effect of the i-th power level, representing how much that level's mean deviates from the grand mean.\n\nUsing the sum-to-zero constraint, we can manually calculate the effect for the final level, $\\hat{\\tau}_4$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Extract coefficients\nest <- coef(fit)\ntau4.hat <- -sum(est[-1])\ntaui.hat <- c(est[-1], tau4.hat)\nprint(\"Estimated Treatment Effects (tau_i):\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Estimated Treatment Effects (tau_i):\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(taui.hat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npower1 power2 power3        \n-66.55 -30.35   7.65  89.25 \n```\n\n\n:::\n\n```{.r .cell-code}\n## Estimates of treatment means (mu_i)\nmu.hat <- est[1]\nmui.hat <- mu.hat + taui.hat\nprint(\"Estimated Treatment Means (mu_i):\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Estimated Treatment Means (mu_i):\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(mui.hat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npower1 power2 power3        \n 551.2  587.4  625.4  707.0 \n```\n\n\n:::\n:::\n\n\n\n\n#### ANOVA Table\n\nThe ANOVA table partitions the total variation into variation **between** treatment groups (`power`) and variation **within** treatment groups (random error). The **p-value** (Pr(>F)) indicates if the treatment has a significant effect.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: rate\n          Df Sum Sq Mean Sq F value    Pr(>F)    \npower      3  66871 22290.2  66.797 2.883e-09 ***\nResiduals 16   5339   333.7                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n#### 95% Confidence Intervals for Treatment Means\n\nA **confidence interval** provides a range of plausible values for the true mean etch rate at each power level.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Number of replicates\nn <- 5 \n## Extract sqrt(MSE) and error df\nsqrt.MSE <- summary.fit$sigma\nDF <- fit$df.residual\n## Find t-value\nt.value <- qt(0.975, DF)\n## Calculate CIs\nCI.lower <- mui.hat - t.value * sqrt.MSE / sqrt(n)\nCI.upper <- mui.hat + t.value * sqrt.MSE / sqrt(n)\n\n## Display CIs\ndata.frame(Power_Level = power_levels, Mean = mui.hat, Lower_CI = CI.lower, Upper_CI = CI.upper)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Power_Level  Mean Lower_CI Upper_CI\npower1         160 551.2 533.8815 568.5185\npower2         180 587.4 570.0815 604.7185\npower3         200 625.4 608.0815 642.7185\n               220 707.0 689.6815 724.3185\n```\n\n\n:::\n:::\n\n\n\n\n**Alternatively, one can use a model without intercept**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_nointercpt <- lm(rate ~ 0+power, data = etching_df)\nsummary(fit_nointercpt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = rate ~ 0 + power, data = etching_df)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -25.4  -13.0    2.8   13.2   25.6 \n\nCoefficients:\n         Estimate Std. Error t value Pr(>|t|)    \npower160  551.200      8.169   67.47   <2e-16 ***\npower180  587.400      8.169   71.90   <2e-16 ***\npower200  625.400      8.169   76.55   <2e-16 ***\npower220  707.000      8.169   86.54   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 18.27 on 16 degrees of freedom\nMultiple R-squared:  0.9993,\tAdjusted R-squared:  0.9991 \nF-statistic:  5768 on 4 and 16 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\nconfint(fit_nointercpt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            2.5 %   97.5 %\npower160 533.8815 568.5185\npower180 570.0815 604.7185\npower200 608.0815 642.7185\npower220 689.6815 724.3185\n```\n\n\n:::\n:::\n\n\n\n\n#### Comparison with Default \"Treatment\" Contrast\n\nFitting the model without specifying contrasts uses R's default (\"treatment\" contrast), which sets $\\tau_1 = 0$. The fundamental results (ANOVA, treatment means) remain unchanged.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1 <- lm(rate ~ power, data = etching_df)\nsummary(fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = rate ~ power, data = etching_df)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -25.4  -13.0    2.8   13.2   25.6 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  551.200      8.169  67.471  < 2e-16 ***\npower180      36.200     11.553   3.133  0.00642 ** \npower200      74.200     11.553   6.422 8.44e-06 ***\npower220     155.800     11.553  13.485 3.73e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 18.27 on 16 degrees of freedom\nMultiple R-squared:  0.9261,\tAdjusted R-squared:  0.9122 \nF-statistic:  66.8 on 3 and 16 DF,  p-value: 2.883e-09\n```\n\n\n:::\n:::\n\n\n\n\n#### Pairwise Comparisons\n\nSince our ANOVA result was significant, we perform **post-hoc tests** to determine exactly which pairs of power levels have different means.\n\n##### Tukey's HSD Test\n\n**Tukey's Honest Significant Difference (HSD)** controls the **family-wise error rate**, adjusting p-values to account for multiple comparisons.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit.aov <- aov(rate ~ power, data = etching_df)\nTukeyHSD(fit.aov)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = rate ~ power, data = etching_df)\n\n$power\n         diff        lwr       upr     p adj\n180-160  36.2   3.145624  69.25438 0.0294279\n200-160  74.2  41.145624 107.25438 0.0000455\n220-160 155.8 122.745624 188.85438 0.0000000\n200-180  38.0   4.945624  71.05438 0.0215995\n220-180 119.6  86.545624 152.65438 0.0000001\n220-200  81.6  48.545624 114.65438 0.0000146\n```\n\n\n:::\n:::\n\n\n\n\n##### Fisher's LSD Test\n\nThe **Fisher's Least Significant Difference (LSD)** test does not control the family-wise error rate but is more powerful.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(etching_df, pairwise.t.test(rate, power, p.adj = \"none\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPairwise comparisons using t tests with pooled SD \n\ndata:  rate and power \n\n    160     180     200    \n180 0.0064  -       -      \n200 8.4e-06 0.0046  -      \n220 3.7e-10 1.7e-08 2.7e-06\n\nP value adjustment method: none \n```\n\n\n:::\n:::\n\n\n\n\n#### Checking Model Assumptions\n\nThe validity of our ANOVA results depends on three key assumptions about the model's residuals. We use diagnostic plots to check them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- rstudent(fit)\nfitted <- fitted.values(fit)\n```\n:::\n\n\n\n\n##### Normality of Residuals\n\nA **Normal Q-Q plot** is used to check if the residuals are normally distributed. The points should fall closely along the straight diagonal line.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqqnorm(r)\nqqline(r)\n```\n\n::: {.cell-output-display}\n![Normal Q-Q plot of standardized residuals.](crbd_files/figure-pdf/qq-plot-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n##### Independence of Residuals\n\nA plot of **residuals versus run order** helps check for independence. We look for random scatter around the zero line.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(r, ylab = \"Standardized residuals\", xlab = \"Run order\",\n     main = \"Plot of residuals vs. run order\")\nabline(h = 0)\n```\n\n::: {.cell-output-display}\n![Standardized residuals vs. run order.](crbd_files/figure-pdf/residuals-vs-order-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n##### Constant Variance (Homoscedasticity)\n\nA plot of **residuals versus fitted values** helps check for constant variance. The spread of residuals should be roughly constant across all fitted values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fitted, r, ylab = \"Standardized residuals\", \n     xlab = \"Fitted values\", main = \"Plot of residuals vs. fitted values\")\nabline(h = 0)\n```\n\n::: {.cell-output-display}\n![Standardized residuals vs. fitted values.](crbd_files/figure-pdf/residuals-vs-fitted-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Unbalanced Designs with nequal Sample Sizes\n\nThe ANOVA framework also handles **unbalanced designs**. We again start by creating a data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Create the data frame\nbricks_df <- data.frame(\n  density = c(21.8, 21.9, 21.7, 21.6, 21.7,\n              21.7, 21.4, 21.5, 21.4,\n              21.9, 21.8, 21.8, 21.6, 21.5,\n              21.9, 21.7, 21.8, 21.4),\n  temperature = factor(c(rep(100, 5), rep(125, 4), rep(150, 5), rep(175, 4)))\n)\n\nbricks_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   density temperature\n1     21.8         100\n2     21.9         100\n3     21.7         100\n4     21.6         100\n5     21.7         100\n6     21.7         125\n7     21.4         125\n8     21.5         125\n9     21.4         125\n10    21.9         150\n11    21.8         150\n12    21.8         150\n13    21.6         150\n14    21.5         150\n15    21.9         175\n16    21.7         175\n17    21.8         175\n18    21.4         175\n```\n\n\n:::\n\n```{.r .cell-code}\n## Fit the model and get the ANOVA table\nfit2 <- lm(density ~ temperature, data = bricks_df)\nsummary(fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = density ~ temperature, data = bricks_df)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-0.300 -0.100  0.000  0.095  0.200 \n\nCoefficients:\n               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    21.74000    0.07171 303.150   <2e-16 ***\ntemperature125 -0.24000    0.10757  -2.231   0.0425 *  \ntemperature150 -0.02000    0.10142  -0.197   0.8465    \ntemperature175 -0.04000    0.10757  -0.372   0.7156    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1604 on 14 degrees of freedom\nMultiple R-squared:  0.3025,\tAdjusted R-squared:  0.153 \nF-statistic: 2.024 on 3 and 14 DF,  p-value: 0.1569\n```\n\n\n:::\n\n```{.r .cell-code}\nanova(fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: density\n            Df  Sum Sq  Mean Sq F value Pr(>F)\ntemperature  3 0.15611 0.052037  2.0237 0.1569\nResiduals   14 0.36000 0.025714               \n```\n\n\n:::\n:::\n\n\n\n\nIn this case, the large p-value (0.133) indicates that there is no statistically significant evidence that firing temperature affects brick density.\n\n## Randomized Complete Block Design\n### Vascular Graft Experiment \n\nThis section analyzes a **Randomized Complete Block Design (RCBD)**, used to control for a known source of variability (here, \"batches of resin,\" treated as **blocks**).\n\n#### Data and Visulization\n\nWe structure the data in a `data.frame` to identify the response, treatment (`pressure`), and block (`batch`) for each observation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Define data vectors\nstrength <- c(90.3, 89.2, 98.2, 93.9, 87.4, 97.9,\n              92.5, 89.5, 90.6, 94.7, 87.0, 95.8,\n              85.5, 90.8, 89.6, 86.2, 88.0, 93.4,\n              82.5, 89.5, 85.6, 87.4, 78.9, 90.7)\npressure_levels <- rep(c(8500, 8700, 8900, 9100), each = 6)\nbatch_levels <- rep(1:6, 4)\n\n## Create the data frame\ngraft_df <- data.frame(\n  strength = strength,\n  pressure = factor(pressure_levels),\n  batch = factor(batch_levels)\n)\n\n\ngraft_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   strength pressure batch\n1      90.3     8500     1\n2      89.2     8500     2\n3      98.2     8500     3\n4      93.9     8500     4\n5      87.4     8500     5\n6      97.9     8500     6\n7      92.5     8700     1\n8      89.5     8700     2\n9      90.6     8700     3\n10     94.7     8700     4\n11     87.0     8700     5\n12     95.8     8700     6\n13     85.5     8900     1\n14     90.8     8900     2\n15     89.6     8900     3\n16     86.2     8900     4\n17     88.0     8900     5\n18     93.4     8900     6\n19     82.5     9100     1\n20     89.5     9100     2\n21     85.6     9100     3\n22     87.4     9100     4\n23     78.9     9100     5\n24     90.7     9100     6\n```\n\n\n:::\n:::\n\n\n\n\n**Visualize the Block and Treatment Effects**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar (mfrow = c(1,2))\n#boxplot\nplot(strength ~ batch, data=graft_df , main = \"Block\")\nplot(strength ~ pressure, data=graft_df , main = \"Pressure\")\n```\n\n::: {.cell-output-display}\n![](crbd_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n**Interaction Plots**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(graft_df, aes(x = pressure, y = strength, group = batch, color = batch)) +\n  stat_summary(fun = mean, geom = \"line\", size = 1) +\n  stat_summary(fun = mean, geom = \"point\", size = 3) +\n  labs(\n    title = \"Interaction Plot: Batch and Pressure\",\n    x = \"Pressue\",\n    y = \"Strength\",\n    color = \"Batch\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![Interaction between Material Type and Temperature.](crbd_files/figure-pdf/plot-interaction-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n#### Model Fitting and ANOVA\n\nThe model `strength ~ pressure + batch` partitions the total variance into treatment, block, and error components. Our primary interest is in the significance of the `pressure` factor.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrcbd.fit1 <- aov(strength ~ pressure + batch, data = graft_df)\nanova(rcbd.fit1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: strength\n          Df Sum Sq Mean Sq F value   Pr(>F)   \npressure   3 178.17  59.390  8.1071 0.001916 **\nbatch      5 192.25  38.450  5.2487 0.005532 **\nResiduals 15 109.89   7.326                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\nThe small p-value for `pressure` (0.0019) provides strong evidence that extrusion pressure significantly affects graft strength after accounting for batch differences.\n\n#### Model Adequacy Checks\n\nThe assumptions for an RCBD are the same as for a CRD. We perform the same diagnostic checks.\n\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nrcbd.r1 <- rstudent(rcbd.fit1)\nrcbd.fitted1 <- fitted.values(rcbd.fit1)\n\nqqnorm(rcbd.r1, main = \"Normal Q-Q Plot\")\nqqline(rcbd.r1)\n```\n\n::: {.cell-output-display}\n![Normal Q-Q Plot](crbd_files/figure-pdf/plot-diagnostics-rcbd-1.pdf)\n:::\n\n```{.r .cell-code}\nplot(rcbd.fitted1, rcbd.r1, ylab = \"Standardized residuals\", \n     xlab = \"Fitted values\", main = \"Residuals vs. Fitted\")\nabline(h = 0)\n```\n\n::: {.cell-output-display}\n![Residuals vs. Fitted Values](crbd_files/figure-pdf/plot-diagnostics-rcbd-2.pdf)\n:::\n\n```{.r .cell-code}\nplot(graft_df$pressure, rcbd.r1, ylab = \"Standardized residuals\", \n     xlab = \"Extrusion pressure\", main = \"Residuals vs. Treatment\")\nabline(h = 0)\n```\n\n::: {.cell-output-display}\n![Residuals vs. Treatment (Pressure)](crbd_files/figure-pdf/plot-diagnostics-rcbd-3.pdf)\n:::\n\n```{.r .cell-code}\nplot(graft_df$batch, rcbd.r1, ylab = \"Standardized residuals\", \n     xlab = \"Batches of raw material\", main = \"Residuals vs. Block\")\nabline(h = 0)\n```\n\n::: {.cell-output-display}\n![Residuals vs. Block (Batch)](crbd_files/figure-pdf/plot-diagnostics-rcbd-4.pdf)\n:::\n:::\n\n\n\n\n#### Pairwise Comparisons\n\nAgain, since the treatment factor (`pressure`) is significant, we perform post-hoc tests.\n\n##### Tukey's HSD Test\n\nTukey's HSD compares all pairs of treatment levels while controlling the family-wise error rate.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTukeyHSD(rcbd.fit1, which = \"pressure\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = strength ~ pressure + batch, data = graft_df)\n\n$pressure\n               diff        lwr       upr     p adj\n8700-8500 -1.133333  -5.637161  3.370495 0.8854831\n8900-8500 -3.900000  -8.403828  0.603828 0.1013084\n9100-8500 -7.050000 -11.553828 -2.546172 0.0020883\n8900-8700 -2.766667  -7.270495  1.737161 0.3245644\n9100-8700 -5.916667 -10.420495 -1.412839 0.0086667\n9100-8900 -3.150000  -7.653828  1.353828 0.2257674\n```\n\n\n:::\n:::\n\n\n\n\n##### Fisher's LSD Test\n\nThe `LSD.test()` function from the `agricolae` package correctly handles the error structure of an RCBD.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## install.packages(\"agricolae\")\nlibrary(agricolae)\n\nout <- LSD.test(rcbd.fit1, trt = \"pressure\", p.adj = \"none\", group = FALSE)\nprint(out$comparison)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            difference pvalue signif.        LCL       UCL\n8500 - 8700   1.133333 0.4795         -2.1974047  4.464071\n8500 - 8900   3.900000 0.0247       *  0.5692620  7.230738\n8500 - 9100   7.050000 0.0004     ***  3.7192620 10.380738\n8700 - 8900   2.766667 0.0970       . -0.5640714  6.097405\n8700 - 9100   5.916667 0.0018      **  2.5859286  9.247405\n8900 - 9100   3.150000 0.0621       . -0.1807380  6.480738\n```\n\n\n:::\n:::",
    "supporting": [
      "crbd_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}