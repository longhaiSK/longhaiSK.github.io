# Simple workflow for deploying static content to GitHub Pages with date injection
name: Deploy static content to Pages with Date Injection

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"] # Change "main" to your default branch if different (e.g., "master")

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important: Fetches all history for git log

      - name: Inject Commit Dates into HTML (with Debugging)
        # This multi-line script runs in the runner's shell
        run: |
          echo "Starting commit date injection..."
          # Find HTML files (adjust path if they aren't in the root, e.g., find ./src -name "*.html")
          find . -name "*.html" -type f | while read -r html_file; do
            echo "=========================================" # Separator for each file
            echo "Processing $html_file"
            echo "========================================="

            # --- Debug: Show content around target BEFORE modification ---
            echo "--- Content of $html_file BEFORE modification ---"
            # Show 5 lines of context around the line containing id="file-date"
            grep -C 5 'id="file-date"' "$html_file" || echo "  WARNING: 'id=\"file-date\"' not found by grep before processing in $html_file."
            echo "-----------------------------------------------------"
            # --- End Debug ---

            # --- Check if placeholder exists ---
            echo "  Checking placeholder presence before awk..."
            if grep -q '' "$html_file"; then
              echo "  Placeholder FOUND by grep in $html_file."
            else
              echo "  ERROR: Placeholder '' NOT FOUND by grep in $html_file. Skipping awk for this file."
              # Add another debug view here just in case
              echo "--- Content of $html_file when placeholder NOT found ---"
              grep -C 5 'id="file-date"' "$html_file" || echo "  WARNING: 'id=\"file-date\"' still not found by grep."
              echo "----------------------------------------------------------"
              continue # Skip to the next file if placeholder isn't found
            fi
            # --- End Check ---

            # Get the ISO 8601 commit date for the file
            commit_date_iso=$(git log -1 --format=%cI --follow -- "$html_file") 
            replacement_successful=0 # Flag

            if [ -z "$commit_date_iso" ]; then
              echo "  WARNING: Could not find commit date for $html_file. Using N/A."
              replacement_text="Last modified: N/A"
              awk_exit_status=1 # Assume failure unless awk succeeds
              # Awk script exits 0 if replacement happens, 1 otherwise
              awk -v repl="$replacement_text" 'BEGIN{c=0}{c+=gsub(//, repl)}{print}END{exit(c>0?0:1)}' "$html_file" > "${html_file}.tmp"
              awk_exit_status=$?
            else
              formatted_date=$(date -d "$commit_date_iso" +'%d/%m/%Y')
              echo "  Commit date: $commit_date_iso -> Formatted: $formatted_date"
              replacement_text="Last modified: $formatted_date"
              awk_exit_status=1 # Assume failure unless awk succeeds
              # Awk script exits 0 if replacement happens, 1 otherwise
              awk -v repl="$replacement_text" 'BEGIN{c=0}{c+=gsub(//, repl)}{print}END{exit(c>0?0:1)}' "$html_file" > "${html_file}.tmp"
              awk_exit_status=$?
            fi

            # Check awk exit status and move file if replacement happened
            if [ $awk_exit_status -eq 0 ]; then
                # awk exited with 0, meaning replacement occurred
                echo "  awk reported success (placeholder found and replaced)."
                mv "${html_file}.tmp" "$html_file"
                if [ $? -eq 0 ]; then
                    echo "  Successfully MOVED temp file over original for $html_file."
                    replacement_successful=1
                else
                    echo "  ERROR: mv failed after successful awk replacement for $html_file"
                    rm -f "${html_file}.tmp" # Clean up temp file on mv failure
                fi
            else
                # awk exited with 1 (or non-zero), meaning no replacement happened
                echo "  INFO: awk reported no replacement occurred for $html_file (Placeholder likely not matched by awk inside awk)."
                rm -f "${html_file}.tmp" # Clean up temp file
            fi
            
            # --- Debug: Show content around target AFTER modification attempt ---
            echo "--- Content of $html_file AFTER modification attempt ---"
            # Use a different grep pattern if the ID itself could be damaged, maybe grep for footer?
            grep -C 5 'id="file-date"' "$html_file" || echo "  WARNING: 'id=\"file-date\"' not found by grep after processing $html_file."
            echo "------------------------------------------------------"
            # --- End Debug ---

          done # End of while loop for files
          echo "Finished processing all found HTML files."

          # --- Debug: List files in upload directory just before upload ---
          echo "========================================="
          echo "Listing contents of upload directory (PWD: $(pwd)) before Setup Pages step:"
          ls -la . # Assuming upload path is '.' - adjust if different
          echo "========================================="
          # --- End Debug ---

        shell: bash # Specify the shell to use, bash is common

      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository (since HTML files were modified in place)
          # Adjust path if your site files are built into a specific directory like '_site' or 'dist'
          path: '.' 

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4