[{"name":"app.R","content":"# --- Load Libraries ---\n# Adding extra print statements to be absolutely sure\nprint(\"R: --- STARTING R SCRIPT ---\")\nprint(\"R: Loading shiny library...\")\nlibrary(shiny)\nprint(\"R: Shiny library loaded.\")\n\n\n# --- Define UI ---\nprint(\"R: Defining UI...\")\nui <- fluidPage(\n  titlePanel(\"Ultra-Minimal Shinylive Test (Versioned Folder)\"),\n  h3(\"If you see this, Shinylive loaded Shiny!\"),\n  verbatimTextOutput(\"r_version\") # Display R version used by webR\n)\nprint(\"R: UI defined.\")\n\n# --- Define server logic ---\nprint(\"R: Defining server function...\")\nserver <- function(input, output, session) {\n  print(\"R: Server function started.\") # Log when the server function is entered\n  \n  # Simple output to confirm R is running\n  output$r_version <- renderPrint({\n    print(\"R: Rendering r_version output...\") # Log when output is being rendered\n    version_string <- \"R version info not available.\"\n    if(exists(\"R.version.string\")) {\n      version_string <- R.version.string\n    } else {\n      # Attempt to get version info another way if R.version.string fails\n      version_info <- tryCatch(R.version, error = function(e) list(string=\"Error getting version\"))\n      version_string <- version_info$string\n    }\n    print(paste(\"R: R Version String:\", version_string)) # Log the value being printed\n    version_string # Return the value to be printed in the UI\n  })\n  print(\"R: r_version output defined.\")\n}\nprint(\"R: Server function defined.\")\n\n# --- Create Shiny app ---\nprint(\"R: Calling shinyApp()...\")\nshinyApp(ui = ui, server = server)\nprint(\"R: --- R SCRIPT FINISHED (or shinyApp took over) ---\")","type":"text"}]
